# generated by datamodel-codegen:
#   filename:  airway.json
#   timestamp: 2024-12-18T15:51:27+00:00

from __future__ import annotations

from typing import List

from pydantic import BaseModel
from uid import UUID


class Geometry(BaseModel):
    type: str
    coordinates: List[List[float]]


class AirwayGeometry(BaseModel):
    geometry: Geometry


class Deviation(BaseModel):
    geometry: Geometry


class AirwayJunctionDetail(BaseModel):
    airway: AirwayGeometry
    deviation: Deviation


class AirwayJunction(BaseModel):
    id: str
    name: str
    type: str
    airways: List[AirwayJunctionDetail]


class AirwaySection(BaseModel):
    id: str
    name: str
    airway_point_ids: List[str]


class SingleAirway(BaseModel):
    id: str
    name: str
    junctions: List[AirwayJunction]
    sections: List[AirwaySection]


class Airway(BaseModel):
    administrator_id: UUID
    business_number: int
    airways: List[SingleAirway]


class AirwayDefinition(BaseModel):
    """
    A class used to represent the definition of an airway.
    Attributes
    ----------
    airway : Airway
        An instance of the Airway class representing the airway details.
    """

    id: UUID
    airway: Airway


class AirwayBooking(BaseModel):
    """
    AirwayBooking represents a booking for an airway corridor.
    Attributes:
        id (UUID): Unique identifier for the booking.
        airway_id (UUID): Unique identifier for the airway.
        reference (str): Reference code for the booking.
        status (str): Current status of the booking.
        start_datetime (str): Start date and time of the booking.
        end_datetime (str): End date and time of the booking.
        booking_expiry_date (str): Expiry date of the booking.
        created_at (str): Timestamp when the booking was created.
        updated_at (str): Timestamp when the booking was last updated.
    """

    id: UUID
    airway_id: UUID
    reference: str
    status: str
    start_datetime: str
    end_datetime: str
    booking_expiry_datetime: str
    created_at: str
    updated_at: str


# class GetAirwaysBookingReferenceResponse(BaseModel):
#     """Get Airways Booking Reference"""

#     raise NotImplementedError


# class QueryAirwaysBookingReferenceParameters(BaseModel):
#     """Query all Bookings for an area of interest"""

#     raise NotImplementedError


# class CreateOrUpdateAirwaysBookingReference(BaseModel):
#     """Create or update airways bookings"""
#     raise NotImplementedError

# class PutAirwaysBookingReferenceParameters(BaseModel):
#     """Put airways booking reference"""
#     raise NotImplementedError
